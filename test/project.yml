---

# Notes:
# Sample project C code is not presently written to produce a release artifact.
# As such, release build options are disabled.
# This sample, therefore, only demonstrates running a collection of unit tests.

:project:
  :use_exceptions: TRUE
  :use_mocks: TRUE
  :use_test_preprocessor: TRUE
  :use_deep_dependencies: TRUE
  :generate_deep_dependencies: TRUE
  :build_root: build
#  :release_build: TRUE
  :test_file_prefix: test_
  :which_ceedling: vendor/ceedling
  :default_tasks:
    - test:all

#:release_build:
#  :output: MyApp.out
#  :use_assembly: FALSE

:environment:

:extension:
  :executable: .elf

:paths:
  :test:
    - +:test/**
    - -:test/support
  :source:
    - src/**
  :support:
    - test/support
  :include:
    - +:/home/phil/Projects/gsl-2.5

:defines:
  # in order to add common defines:
  #  1) remove the trailing [] from the :common: section
  #  2) add entries to the :common: section (e.g. :test: has TEST defined)
  :commmon: &common_defines
    - __DEBUG
    - __MPLAB_DEBUGGER_SIMULATOR=1
    - UNITY_INCLUDE_CONFIG_H
    - CEXCEPTION_USE_CONFIG_FILE
  :test:
    - *common_defines
    - TEST
  :test_preprocess:
    - *common_defines
    - TEST

:cmock:
  :mock_prefix: mock_
  :when_no_prototypes: :warn
  :enforce_strict_ordering: TRUE
  :plugins:
    - :ignore
    - :ignore_arg
    - :callback
    - :return_thru_ptr
  :treat_as:
    uint8:    HEX8
    uint16:   HEX16
    uint32:   UINT32
    int8:     INT8
    bool:     UINT8
  :defines:
    - CMOCK_MEM_SIZE=2000
  :when_ptr: :compare_ptr
  
    
:gcov:
    :html_report_type: basic
    
        
#:tools:
# Ceedling defaults to using gcc for compiling, linking, etc.
# As [:tools] is blank, gcc will be used (so long as it's in your system path)
# See documentation to configure a given toolchain for use
:tools:
  :test_compiler: 
    :executable: xc32-gcc
    :arguments:
        - -I"$": COLLECTION_PATHS_TEST_TOOLCHAIN_INCLUDE               #expands to -I search paths
        - -I"$": COLLECTION_PATHS_TEST_SUPPORT_SOURCE_INCLUDE_VENDOR   #expands to -I search paths
        - -D$: COLLECTION_DEFINES_TEST_AND_VENDOR  #expands to all -D defined symbols
        - -g -x c -mprocessor=32MM0256GPM028 -legacy-libc -specs=specs.txt -fdata-sections
        - -Wall
        - -Wno-pointer-arith
        - -fframe-base-loclist
        - -c ${1}                       #source code input file (Ruby method call param list sub)
        - -o ${2}                       #object file output (Ruby method call param list sub)
  :test_linker:
    :executable: xc32-gcc
    :arguments:
        - -D$: COLLECTION_DEFINES_TEST_AND_VENDOR  #expands to all -D defined symbols
        - -mprocessor=32MM0256GPM028
        - -legacy-libc -Wl,--defsym=__MPLAB_BUILD=1,--defsym=_min_heap_size=2000,--defsym=_min_stack_size=4000,--no-code-in-dinit,--no-dinit-in-serial-mem,--gc-sections
        - -mdebugger
        - ${1}               #list of object files to link (Ruby method call param list sub)
        - -o ${2}          #executable file output (Ruby method call param list sub)
        - -L. -lgsl
  :test_file_preprocessor:
    :executable: xc32-gcc
    :arguments:
        - -E
        - -I"$": COLLECTION_PATHS_TEST_TOOLCHAIN_INCLUDE               #expands to -I search pa ths
        - -I"$": COLLECTION_PATHS_TEST_SUPPORT_SOURCE_INCLUDE_VENDOR   #expands to -I search paths
        - -D$: COLLECTION_DEFINES_TEST_AND_VENDOR  #expands to all -D defined symbols
        - ${1}
        - -o ${2}
  :test_dependencies_generator:
    :executable: xc32-gcc
    :arguments:
        - -E
        - -I"$": COLLECTION_PATHS_TEST_TOOLCHAIN_INCLUDE               #expands to -I search pa ths
        - -I"$": COLLECTION_PATHS_TEST_SUPPORT_SOURCE_INCLUDE_VENDOR   #expands to -I search paths
        - -D$: COLLECTION_DEFINES_TEST_AND_VENDOR  #expands to all -D defined symbols
        - ${1}
        - -o ${2}
  :test_fixture:
    :executable: ./run_test.py
    :arguments:
        - ${1}
  

# LIBRARIES
# These libraries are automatically injected into the build process. Those specified as
# common will be used in all types of builds. Otherwise, libraries can be injected in just
# tests or releases. These options are MERGED with the options in supplemental yaml files.
:libraries:
  :placement: :end
  :flag: "${1}"  # or "-L ${1}" for example
  :common: &common_libraries []
  :test:
    - *common_libraries
    - gsl.a
  :release:
    - *common_libraries

:plugins:
  :load_paths:
    - vendor/ceedling/plugins
  :enabled:
    - stdout_pretty_tests_report
    - module_generator
    - raw_output_report
...
